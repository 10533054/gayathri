students=[]

# Student class starts
class Student:
     
    def __init__(self,student_id,name,course_code):
        self.id=student_id
        self.name=name
        self.course_code=course_code
# Student class ends

#Data structure manipulation class starts        
class Datas:

    def add(self,student):                                         # Adds the data to a pre existing list
        students.append(student)

    def retrieve(self):                                            # Pops the last entry from the list
        last_student=students[0]
        students.pop(0)
        return last_student

    def view_all(self):                                            # Views all students entered so far

        self.sort()
        result=""
        i=0
        
        for _temp in students:
            result+="Entry: "+str(i)
            i+=1
            result+="\t\t Student id: "+str(_temp.id)
            result+="\t\t Student name: "+str(_temp.name)
            result+="\t\t Student course: "+str(_temp.course_code)
            result+="\n"

        return(result)

    def sort(self):
        #insertion Sort
        for i in range(len(students)):
            holder = students[i]
            pos = i
        
            while (pos > 0 and students[pos - 1].id > holder.id):
                # Swap the number down the list
                students[pos] = students[pos - 1]
                pos = pos - 1
            # Break and do the final swap
            students[pos] = holder

#Data structure manipulation class ends        
    
    

ds=Datas()

while(True):
    choice=int(input("1: Add a student\n 2: View all students\n 3:See the latest entry"))
    if choice==1:
        _std_id=int(input("Enter the student id"))
        
        while(not len(str(_std_id))==8):
            print("\n *The student id must be 8 characters long.")
            _std_id=int(input("Enter the student id"))
        
        _std_name=input("Enter the name of the student")
        
        _std_course=input("Enter the student course id")
        while(not len(_std_course)==7):
            print("\n *The course id must be 7 characters long.")
            _std_course=input("Enter the student course id")
        
        _temp_student=Student(_std_id,_std_name,_std_course)
        ds.add(_temp_student)
        
    elif choice==2:
        print(ds.view_all())

    elif choice==3:
        print("The entry with the smallest reg number will be removed.")
        _temp_deleted=ds.retrieve()
        print("The current object is removed :\n\tID:",_temp_deleted.id,"\tNAME:",_temp_deleted.name,"\tCOURSE CODE:",_temp_deleted.course_code)


    decision=input("\n Do you want to repeat any of the operations. \n Enter Y to continue N to exit.")
    if decision=='Y' or decision=='y':
        continue
    elif decision=='N' or decision=='n':
        print('You chose to exit')
        break
    else:
        print('unsupported option')
        break
